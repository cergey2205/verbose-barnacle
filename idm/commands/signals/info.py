from ...objects import dp, MySignalEvent, SignalEvent
from ...utils import edit_message, new_message, delete_message
from datetime import datetime
from idm import __version__
from ..my_signals.auto_friends_add import afa_thread
from ..my_signals.online import online_thread
from threading import Thread
import time

@dp.signal_event_handle('–∏–Ω—Ñ–æ', '–∏–Ω—Ñ–∞', '-i', 'info')
def sinfo(event: SignalEvent) -> str:

    def is_alive(th: Thread) -> bool:
        if th == None:return False
        if not th.is_alive():return False
        return True

    if event.msg['from_id'] not in event.db.trusted_users:
        message_id = new_message(event.api, event.chat.peer_id, message='–Ø —Ç–µ–±–µ –Ω–µ –¥–æ–≤–µ—Ä—è—é üòë')
        time.sleep(3)
        delete_message(event.api, event.chat.peer_id, message_id)
        return "ok"

    owner = event.api('users.get', user_ids=event.db.owner_id)[0]


    message = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä–Ω–æ–º:
    IDM v{__version__}
    –í–ª–∞–¥–µ–ª–µ—Ü: [id{owner['id']}|{owner['first_name']} {owner['last_name']}]
    –ß–∞—Ç–æ–≤: {len(event.db.chats.keys())}

    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
    –Ø {'' if event.chat.installed else '–Ω–µ'} –¥–µ–∂—É—Ä–Ω—ã–π –≤ —á–∞—Ç–µ {'‚úÖ' if event.chat.installed else '‚ùå'}
    Iris ID: {event.chat.iris_id}
    –ò–º—è: {event.chat.name}

    """.replace('    ', '')
    new_message(event.api, event.chat.peer_id, message=message)
    return "ok"